<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xmlns:security="http://www.springframework.org/schema/security"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
    		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    		http://www.springframework.org/schema/security/oauth2
    		http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security-4.0.xsd">
    <beans:description>Spring Security OAuth2</beans:description>

    <beans:bean id="propertyConfigurer"
                class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <beans:property name="locations">
            <beans:list>
                <beans:value>classpath:jdbc.properties</beans:value>
                <beans:value>classpath:redis.properties</beans:value>
                <beans:value>classpath:rabbitmq.properties</beans:value>
                <beans:value>classpath:taskCron.properties</beans:value>
                <beans:value>classpath:oauth2.properties</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>

    <!-- 框架自己提供的URL路径是/oauth/authorize（授权端），/oauth/token (令牌端)， /oauth/confirm_access
        (用户发送确认授权到这里)，还有/oauth/error (用户呈现授权服务器授权出错的请求) -->
    <!-- 获取token -->
    <http pattern="/oauth/token" create-session="stateless"
          entry-point-ref="oauth2AuthenticationEntryPoint" use-expressions="false"
          authentication-manager-ref="oauth2AuthenticationManager">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>
        <http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>
        <!-- include this only if you need to authenticate clients via request
            parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter"
                       before="BASIC_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <!-- 不启用csrf防范 -->
        <csrf disabled="true"/>
    </http>

    <!-- 哪些url访问时需要token -->
    <http pattern="/oauth2/api/test" create-session="never"
          use-expressions="false" entry-point-ref="oauth2AuthenticationEntryPoint"
          access-decision-manager-ref="accessDecisionManager">
        <anonymous enabled="false"/>
        <!-- 此处access如果是多个，是与的关系，例如ROLE_ADMIN,SCOPE_READ -->
        <intercept-url pattern="/oauth2/api/test" access="ROLE_CLIENT"/>
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>

    <!-- <beans:bean id="csrfTokenRepository" class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository">
        <beans:property name="headerName" value="X-CSRF-TOKEN" /> </beans:bean> -->

    <beans:bean id="oauth2AuthenticationEntryPoint"
                class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="exceptionRenderer" ref="oAuthExceptionRenderer"/>
    </beans:bean>
    <!-- 访问拒绝 -->
    <beans:bean id="oauth2AccessDeniedHandler"
                class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
        <beans:property name="exceptionRenderer" ref="oAuthExceptionRenderer"/>
    </beans:bean>

    <!-- Provide only JSON responses -->
    <beans:bean id='oAuthExceptionRenderer'
                class='org.springframework.security.oauth2.provider.error.DefaultOAuth2ExceptionRenderer'>
        <beans:property name='messageConverters'>
            <beans:list>
                <beans:bean
                        class='org.springframework.http.converter.json.MappingJackson2HttpMessageConverter'/>
            </beans:list>
        </beans:property>
    </beans:bean>

    <!-- 验证类型、用户名、密码都作为表单参数提交 -->
    <beans:bean id="clientCredentialsTokenEndpointFilter"
                class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="oauth2AuthenticationManager"/>
    </beans:bean>
    <!-- 访问控制 -->
    <beans:bean id="accessDecisionManager"
                class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean
                        class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <beans:bean class="org.springframework.security.access.vote.RoleVoter"/>
                <beans:bean
                        class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>
    <!-- 两个authentication-manager都需要有 -->
    <authentication-manager id="oauth2AuthenticationManager">
        <authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>
    </authentication-manager>
    <!-- 获取UserDetails信息，也可以从数据库中获取 -->
    <authentication-manager id="authenticationManager">
        <authentication-provider>
            <user-service>
                <user name="guest" password="guest@123456" authorities="ROLE_CLIENT"/>
            </user-service>
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="oauth2ClientDetailsUserService"
                class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetailsService"/>
    </beans:bean>

    <!-- token与用户的对应关系，存储在内存当中 -->
    <beans:bean id="tokenStore"
                class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"/>
    <!-- <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <beans:constructor-arg index="0" ref="dataSource"/> </beans:bean> -->
    <!-- This is where we defined token based configurations, token validity
        and other things -->
    <beans:bean id="tokenServices"
                class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <!-- 支持refresh token -->
        <beans:property name="supportRefreshToken" value="true"/>
        <beans:property name="accessTokenValiditySeconds"
                        value="120"/>
        <beans:property name="clientDetailsService" ref="clientDetailsService"/>
    </beans:bean>
    <!-- 用户授权处理 -->
    <beans:bean id="userApprovalHandler"
                class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="requestFactory" ref="oAuth2RequestFactory"/>
    </beans:bean>
    <!-- 配置oauth2 server支持的请求类型 -->
    <oauth2:authorization-server
            client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
            user-approval-handler-ref="userApprovalHandler">
        <oauth2:authorization-code/>
        <oauth2:implicit/>
        <oauth2:refresh-token/>
        <oauth2:client-credentials/>
        <!-- 此处一定要配置authentication-manager-ref，否则会报401 -->
        <oauth2:password authentication-manager-ref="authenticationManager"/>
    </oauth2:authorization-server>
    <!-- 这个resource-server的用处在于，之后会作为一个custom-filter加到Spring Security Filter
        Chain当中的。 当第三方client尝试访问受限资源时，该filter会对client信息和其携带过来的access_token进行校验，校验通过之后才能拿到资源。
        此处的entry-point-ref，可使返回结果变为json（默认是xml） -->
    <oauth2:resource-server id="resourceServerFilter"
                            entry-point-ref="oauth2AuthenticationEntryPoint"
                            resource-id="api-resource"
                            token-services-ref="tokenServices"/>

    <beans:bean id="oAuth2RequestFactory"
                class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <beans:constructor-arg ref="clientDetailsService"/>
    </beans:bean>
    <!-- 第三方客户端信息查询配置，某种意义上讲，cient算是一种特殊的user -->
    <oauth2:client-details-service id="clientDetailsService">
        <!-- clientId：（必须）客户端id。 secret：（对于可信任的客户端是必须的）客户端的私密信息。 scope：客户端的作用域。如果scope未定义或者为空（默认值），则客户端作用域不受限制。
            authorizedGrantTypes：授权给客户端使用的权限类型。默认值为空。 authorities：授权给客户端的权限（Spring普通的安全权限）。
            refresh token 有效期 1209600 ， 14天 ；access token有效期，3分钟 -->
        <oauth2:client client-id="restapp" resource-ids="api-resource"
                       refresh-token-validity="1209600" access-token-validity="180"
                       authorized-grant-types="password,authorization_code,refresh_token"
                       secret="secret" authorities="ROLE_CLIENT" scope="read,write,trust"/>
    </oauth2:client-details-service>

    <security:global-method-security
            pre-post-annotations="enabled" proxy-target-class="true">
        <security:expression-handler ref="oauthExpressionHandler"/>
    </security:global-method-security>

    <oauth2:expression-handler id="oauthExpressionHandler"/>
    <oauth2:web-expression-handler id="oauthWebExpressionHandler"/>

</beans:beans>
