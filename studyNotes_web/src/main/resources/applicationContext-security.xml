<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
    		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security-4.0.xsd">
    <beans:description>Spring Security</beans:description>

    <!-- 注意加载位置,必须处于所有<http>配置之前 -->
    <beans:bean id="webInvocationFilter"
                class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator">
        <beans:constructor-arg ref="securityFilter"/>
    </beans:bean>

    <!-- 未登录的切入点 -->
    <beans:bean id="authenticationEntryPoint"
                class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <beans:constructor-arg index="0" value="/account/login"/>
    </beans:bean>
    <!--<beans:bean id="authenticationProcessingFilterEntryPoint"-->
                <!--class="org.springframework.security.web.authentication.AuthenticationProcessingFilterEntryPoint">-->
        <!--<beans:property name="loginFormUrl" value="/login"></beans:property>-->
    <!--</beans:bean>-->

    <authentication-manager alias="customAuthenticationManager"
                            erase-credentials="false">
        <authentication-provider ref="authenticationProvider"/>
    </authentication-manager>


    <beans:bean id="authenticationProvider"
                class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <beans:property name="hideUserNotFoundExceptions"
                        value="false"/>
        <beans:property name="userDetailsService" ref="customUserDetailServiceImpl"/>
        <beans:property name="passwordEncoder" ref="passwordEncoder"/>
        <beans:property name="saltSource" ref="saltSource"/>
    </beans:bean>
    <!-- MD5加密 -->
    <beans:bean id="passwordEncoder"
                class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
    <beans:bean id="saltSource"
                class="org.springframework.security.authentication.dao.ReflectionSaltSource">
        <beans:property name="userPropertyToUse" value="username"/>
    </beans:bean>

    <beans:bean id="customUserDetailServiceImpl"
                class="com.wen.security.CustomUserDetailService"/>

    <!-- 登录验证器 -->
    <beans:bean id="loginFilter"
                class="com.wen.security.CustomUsernamePasswordAuthenticationFilter">
        <beans:property name="authenticationManager" ref="customAuthenticationManager"/>
        <beans:property name="authenticationSuccessHandler">
            <beans:bean class="com.wen.security.CustomAuthenticationSuccessHandler">
                <!-- 配置登录成功之后跳转到哪 -->
                <beans:property name="defaultTargetUrl" value="/account/index"/>
                <beans:property name="alwaysUseDefaultTargetUrl"
                                value="true"/>
            </beans:bean>
        </beans:property>
        <beans:property name="authenticationFailureHandler">
            <beans:bean
                    class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                <!-- 可以配置相应的跳转方式。属性forwardToDestination为true采用forward false为sendRedirect -->
                <beans:property name="defaultFailureUrl" value="/account/login"/>
            </beans:bean>
        </beans:property>
        <beans:property name="forwardToDestination" value="true"/>
        <!--<beans:property name="filterProcessesUrl" value="/login"/>-->
        <!--<beans:property name="rememberMeServices" ref="rememberMeServices"/>-->
    </beans:bean>

    <!-- 认证过滤器 -->
    <beans:bean id="securityFilter" class="com.wen.security.CustomSecurityFilter">
        <beans:property name="authenticationManager" ref="customAuthenticationManager"/>
        <beans:property name="accessDecisionManager" ref="customAccessDecisionManager"/>
        <beans:property name="securityMetadataSource" ref="customSecurityMetadataSource"/>
        <!--<beans:property name="securityService" ref="securityService"/>-->
    </beans:bean>

    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <beans:bean id="customAccessDecisionManager"
                class="com.wen.security.CustomAccessDecisionManager">
    </beans:bean>

    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="customSecurityMetadataSource"
                class="com.wen.security.CustomSecurityMetadataSource">
    </beans:bean>

    <beans:bean id="csrfTokenRepository"
                class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository"/>

    <!-- 静态资源,无需拦截 -->
    <http pattern="/jslib/**" security="none"/>
    <!--<http pattern="/jsview/**" security="none"/>-->
    <!--<http pattern="/main/**" security="none"/>-->
    <http pattern="/stylelib/**" security="none"/>
    <!--<http pattern="/styleview/**" security="none"/>-->
    <!--<http pattern="/uf/**" security="none"/>-->
    <!--<http pattern="/image/**" security="none"/>-->
    <http pattern="/account/errorpage" security="none"/>
    <!--<http pattern="/account/login" security="none"/>-->
    <!-- 验证码 -->
    <http pattern="/account/captcha" security="none"/>

    <!-- 必须要有这句话 要不会报错 No bean named 'springSecurityFilterChain' -->
    <http use-expressions="false" entry-point-ref="authenticationEntryPoint">

        <intercept-url pattern="/com/wen" access="IS_AUTHENTICATED_ANONYMOUSLY"/>

        <access-denied-handler error-page="/account/errorpage"/>

        <custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER"/>
        <custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
        <csrf token-repository-ref="csrfTokenRepository" disabled="true"/>
    </http>

</beans:beans>
